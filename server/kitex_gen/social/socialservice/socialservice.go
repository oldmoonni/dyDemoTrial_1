// Code generated by Kitex v0.4.4. DO NOT EDIT.

package socialservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	social "github.com/trial_1/dyDemoTrial_1/server/kitex_gen/social"
)

func serviceInfo() *kitex.ServiceInfo {
	return socialServiceServiceInfo
}

var socialServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SocialService"
	handlerType := (*social.SocialService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAction": kitex.NewMethodInfo(relationActionHandler, newSocialServiceRelationActionArgs, newSocialServiceRelationActionResult, false),
		"FollowList":     kitex.NewMethodInfo(followListHandler, newSocialServiceFollowListArgs, newSocialServiceFollowListResult, false),
		"FollowerList":   kitex.NewMethodInfo(followerListHandler, newSocialServiceFollowerListArgs, newSocialServiceFollowerListResult, false),
		"FriendList":     kitex.NewMethodInfo(friendListHandler, newSocialServiceFriendListArgs, newSocialServiceFriendListResult, false),
		"MessageChat":    kitex.NewMethodInfo(messageChatHandler, newSocialServiceMessageChatArgs, newSocialServiceMessageChatResult, false),
		"MessageAction":  kitex.NewMethodInfo(messageActionHandler, newSocialServiceMessageActionArgs, newSocialServiceMessageActionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "social",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*social.SocialServiceRelationActionArgs)
	realResult := result.(*social.SocialServiceRelationActionResult)
	success, err := handler.(social.SocialService).RelationAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialServiceRelationActionArgs() interface{} {
	return social.NewSocialServiceRelationActionArgs()
}

func newSocialServiceRelationActionResult() interface{} {
	return social.NewSocialServiceRelationActionResult()
}

func followListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*social.SocialServiceFollowListArgs)
	realResult := result.(*social.SocialServiceFollowListResult)
	success, err := handler.(social.SocialService).FollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialServiceFollowListArgs() interface{} {
	return social.NewSocialServiceFollowListArgs()
}

func newSocialServiceFollowListResult() interface{} {
	return social.NewSocialServiceFollowListResult()
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*social.SocialServiceFollowerListArgs)
	realResult := result.(*social.SocialServiceFollowerListResult)
	success, err := handler.(social.SocialService).FollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialServiceFollowerListArgs() interface{} {
	return social.NewSocialServiceFollowerListArgs()
}

func newSocialServiceFollowerListResult() interface{} {
	return social.NewSocialServiceFollowerListResult()
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*social.SocialServiceFriendListArgs)
	realResult := result.(*social.SocialServiceFriendListResult)
	success, err := handler.(social.SocialService).FriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialServiceFriendListArgs() interface{} {
	return social.NewSocialServiceFriendListArgs()
}

func newSocialServiceFriendListResult() interface{} {
	return social.NewSocialServiceFriendListResult()
}

func messageChatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*social.SocialServiceMessageChatArgs)
	realResult := result.(*social.SocialServiceMessageChatResult)
	success, err := handler.(social.SocialService).MessageChat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialServiceMessageChatArgs() interface{} {
	return social.NewSocialServiceMessageChatArgs()
}

func newSocialServiceMessageChatResult() interface{} {
	return social.NewSocialServiceMessageChatResult()
}

func messageActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*social.SocialServiceMessageActionArgs)
	realResult := result.(*social.SocialServiceMessageActionResult)
	success, err := handler.(social.SocialService).MessageAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialServiceMessageActionArgs() interface{} {
	return social.NewSocialServiceMessageActionArgs()
}

func newSocialServiceMessageActionResult() interface{} {
	return social.NewSocialServiceMessageActionResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, req *social.RelationActionRequest) (r *social.RelationActionResponse, err error) {
	var _args social.SocialServiceRelationActionArgs
	_args.Req = req
	var _result social.SocialServiceRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowList(ctx context.Context, req *social.FollowListRequest) (r *social.FollowListResponse, err error) {
	var _args social.SocialServiceFollowListArgs
	_args.Req = req
	var _result social.SocialServiceFollowListResult
	if err = p.c.Call(ctx, "FollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, req *social.FollowerListRequest) (r *social.FollowerListResponse, err error) {
	var _args social.SocialServiceFollowerListArgs
	_args.Req = req
	var _result social.SocialServiceFollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, req *social.FriendListRequest) (r *social.FriendListResponse, err error) {
	var _args social.SocialServiceFriendListArgs
	_args.Req = req
	var _result social.SocialServiceFriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageChat(ctx context.Context, req *social.MessageChatRequest) (r *social.MessageChatResponse, err error) {
	var _args social.SocialServiceMessageChatArgs
	_args.Req = req
	var _result social.SocialServiceMessageChatResult
	if err = p.c.Call(ctx, "MessageChat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageAction(ctx context.Context, req *social.MessageActionRequest) (r *social.MessageActionResponse, err error) {
	var _args social.SocialServiceMessageActionArgs
	_args.Req = req
	var _result social.SocialServiceMessageActionResult
	if err = p.c.Call(ctx, "MessageAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
