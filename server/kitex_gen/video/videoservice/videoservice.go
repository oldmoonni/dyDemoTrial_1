// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	video "github.com/trial_1/dyDemoTrial_1/server/kitex_gen/video"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"VideoFeed":        kitex.NewMethodInfo(videoFeedHandler, newVideoServiceVideoFeedArgs, newVideoServiceVideoFeedResult, false),
		"VideoPublishList": kitex.NewMethodInfo(videoPublishListHandler, newVideoServiceVideoPublishListArgs, newVideoServiceVideoPublishListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func videoFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoFeedArgs)
	realResult := result.(*video.VideoServiceVideoFeedResult)
	success, err := handler.(video.VideoService).VideoFeed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoFeedArgs() interface{} {
	return video.NewVideoServiceVideoFeedArgs()
}

func newVideoServiceVideoFeedResult() interface{} {
	return video.NewVideoServiceVideoFeedResult()
}

func videoPublishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoPublishListArgs)
	realResult := result.(*video.VideoServiceVideoPublishListResult)
	success, err := handler.(video.VideoService).VideoPublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoPublishListArgs() interface{} {
	return video.NewVideoServiceVideoPublishListArgs()
}

func newVideoServiceVideoPublishListResult() interface{} {
	return video.NewVideoServiceVideoPublishListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) VideoFeed(ctx context.Context, req *video.FeedRequest) (r *video.FeedResponse, err error) {
	var _args video.VideoServiceVideoFeedArgs
	_args.Req = req
	var _result video.VideoServiceVideoFeedResult
	if err = p.c.Call(ctx, "VideoFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPublishList(ctx context.Context, req *video.PublishListRequest) (r *video.PublishListResponse, err error) {
	var _args video.VideoServiceVideoPublishListArgs
	_args.Req = req
	var _result video.VideoServiceVideoPublishListResult
	if err = p.c.Call(ctx, "VideoPublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
